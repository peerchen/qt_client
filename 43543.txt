sql:select  nvl(order_no, ''),  acct_no,  nvl(cust_abbr, ''),  nvl(instid, ''),  nvl(bs, ''),  nvl(to_char(price), ''),  nvl(to_char(volume), ''),  nvl(to_char(match_amount), ''),  nvl(to_char(match_price), ''),  entr_stat,  nvl(to_char(cover_no), ''),  nvl(e_teller_id, ''),  nvl(c_teller_id, ''),  nvl(e_exch_time, ''),  nvl(c_exch_time, ''),  nvl(branch_id, ''),  to_char(batch_no),  to_char(curr_bal),  to_char(total_margin),  to_char(float_surplus),  risk_degree1,  to_char(inst_prices),  to_char(acct_type),  to_char(gradeid),  to_char(m_margin),  to_char(b_margin),  risk_degree2, nvl(FC_TYPE,''), branch_name from	
(   select      a.local_order_no,      a.acct_no,      d.cust_abbr,      d.acct_type,      d.grade_id,      a.instid, 	  a.FC_TYPE,      a.bs,      a.price,      a.volume,      a.COVER_NO, 	  a.order_status,      (case when b.entr_stat = '1' or b.entr_stat = 'o' then '1'           when b.entr_stat = 'p' or ((b.entr_stat = 'd' or b.entr_stat = 's') and c.match_amount > 0) then '2'           when b.entr_stat = 'c' then '3'           when b.entr_stat = 'd' or b.entr_stat = 's' then '4'           else '5' end ) as entr_stat,      b.order_no,      c.match_price,      c.match_amount,      b.e_teller_id,      case when b.order_no is not null then b.c_teller_id else '' end as c_teller_id, 	  a.exch_date,      nvl2(b.e_exch_time, substr(b.exch_date, 1, 4)||'-'||substr(b.exch_date, 5, 2)||'-'||substr(b.exch_date, 7, 2)||' '||substr(b.e_exch_time, 1, 2)||':'||substr(b.e_exch_time, 3, 2)||':'||substr(b.e_exch_time, 5, 2), b.e_exch_time) as e_exch_time,      case when b.order_no is not null then nvl2(b.c_exch_time, substr(b.exch_date, 1, 4)||'-'||substr(b.exch_date, 5, 2)||'-'||substr(b.exch_date, 7, 2)||' '||substr(b.c_exch_time, 1, 2)||':'||substr(b.c_exch_time, 3, 2)||':'||substr(b.c_exch_time, 5, 2), b.c_exch_time) else '' end as c_exch_time ,      d.branch_id,      d.grade_id gradeid,      a.batch_no,      e.curr_bal,      e.m_margin,      e.b_margin,      e.total_margin,      e.float_surplus,      e.risk_degree1,      e.risk_degree2,      e.inst_prices, 	  f.branch_name   from force_cov_order a 	left join     (select exch_date,order_no,local_order_no,entr_price,entr_amount,entr_stat,e_teller_id,e_exch_time,c_teller_id,c_exch_time from entr_flow where offset_flag = '2' union all      select exch_date,order_no,local_order_no,entr_price,entr_amount,entr_stat,e_teller_id,e_exch_time,c_teller_id,c_exch_time from his_entr_flow where offset_flag = '2' ) b  	on a.local_order_no = b.local_order_no and a.exch_date = b.exch_date 	left join     (  select exch_date ,local_order_no,sum(match_price*match_amount)/sum(match_amount) as match_price,sum(match_amount) as match_amount from         ( select exch_date,local_order_no,match_price,match_amount from busi_back_flow  where offset_flag = '2' union all           select exch_date,local_order_no,match_price,match_amount from his_m_match_flow where offset_flag = '2'  )        group by exch_date, local_order_no ) c 	on a.local_order_no = c.local_order_no and a.exch_date = c.exch_date 	left join cust_info d on a.acct_no = d.acct_no    left join branch_info f on d.branch_id = f.branch_id 	left join force_cov_condition e on a.batch_no = e.batch_no and a.acct_no = e.acct_no and a.exch_date = e.exch_date ) k where k.exch_date between '2018/2/9' and '2018/7/9'  and branch_id in (select branch_id from branch_info start with branch_id = '000001000001' connect by prior branch_id = parent_branch_id) and k.instid = 'mAu(T+D)' and k.acct_no = '0100125111' order by e_exch_time desc, batch_no desc, acct_no desc 
 